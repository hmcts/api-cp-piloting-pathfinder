plugins {
  id 'java'
  id 'org.openapi.generator' version '7.12.0'
  id 'com.diffplug.spotless' version '7.0.3'
  id 'org.sonarqube' version '6.1.0.5360'
  id 'jacoco'
}

plugins {
  id "com.github.ben-manes.versions" version "0.52.0"
}

group = 'uk.gov.hmcts.cp'
version = System.getProperty('API_SPEC_VERSION') ?: '0.0.999'

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

sourceSets {
  main {
    java {
      srcDir "$buildDir/generated/src/main/java"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs = ["-Xlint:unchecked", "-Werror"]
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

tasks.named('test') {
  failFast = true
}

tasks.named('jacocoTestReport') {
  dependsOn tasks.named('test')
  reports {
    xml.required.set(true)
    csv.required.set(false)
    html.required.set(true)
  }
}

tasks.named('check') {
  dependsOn tasks.named('jacocoTestReport')
}
tasks.named('sonar') {
 dependsOn tasks.named('jacocoTestReport')
}

sonarqube {
  properties {
    property "sonar.projectName", "API CP :: ${rootProject.name}"
    property "sonar.projectKey", "uk.gov.hmcts.cp:${rootProject.name}"
    property "sonar.host.url", System.getenv("SONAR_HOST_URL") ?: "https://sonarcloud.io"
    property "sonar.token", System.getenv("SONAR_TOKEN") ?: ""
  }
}

// check dependencies upon release ONLY
tasks.named("dependencyUpdates").configure {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = 'https://jitpack.io'
  }
}

ext {
  springBootVersion = "3.4.4"
}

def inputSpecFile = fileTree("src/main/resources/openapi").matching {
  include("*.openapi.yml")
}.singleFile

tasks.named("openApiGenerate") {
  inputs.file(inputSpecFile)
}

openApiGenerate {
  generatorName = "spring"
  inputSpec = inputSpecFile.absolutePath
  outputDir = "$buildDir/generated"
  apiPackage = "uk.gov.hmcts.cp.openapi.api"
  modelPackage = "uk.gov.hmcts.cp.openapi.model"
  generateModelTests = true
  generateApiTests = true
  cleanupOutput = true
  configOptions = [
          dateLibrary            : "java8",
          interfaceOnly          : "true",
          hideGenerationTimestamp: "true",
          useJakartaEe           : "true",
          useBeanValidation      : "true",
          useTags                : "true",
          useSpringBoot3         : "true",
          implicitHeaders        : "false",
          performBeanValidation  : "true",
          openApiNullable        : "false"
  ]
}

tasks.named('compileJava') {
  dependsOn tasks.named('spotlessApply')
}

spotless {
  java {
    target 'build/generated/src/main/**/*.java'
    removeUnusedImports()
    eclipse().configFile('config/formatter/eclipse-formatter.xml')
  }
}

tasks.named('spotlessJava') {
  dependsOn tasks.named('openApiGenerate')
}

tasks.named('spotlessApply') {
  dependsOn tasks.named('openApiGenerate')
}

tasks.withType(Checkstyle).configureEach {
  def generatedDir = file("${buildDir}/generated/src/main/java").canonicalPath
  source = source.filter { file ->
    !file.canonicalPath.startsWith(generatedDir)
  }
}

dependencies {
  // OpenAPI Generator runtime support
  implementation 'org.openapitools:openapi-generator-core:7.12.0'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.3'
  implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
  implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
  implementation 'io.swagger.core.v3:swagger-annotations:2.2.30'
}